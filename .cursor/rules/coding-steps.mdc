---
description: 
globs: 
alwaysApply: true
---
# When asked to code a task
1. Review the [main-project-specifications.mdc](mdc:.cursor/specifications/main-project-specifications.mdc) to understand requirements
2. Identify the specific task.
3. Review any related specifications (e.g., architecture, game flow, etc.)
4. Before implementation:
   - Review existing code related to the task
   - Check for dependencies on other tasks
   - Identify test requirements
   - Review state management requirements (see [main-rule.mdc](mdc:.cursor/rules/main-rule.mdc) for state management guidelines)
5. Implement the code:
   - Create new files or modify existing ones
   - Add necessary tests following project testing guidelines
   - Add proper documentation (JavaDoc and inline comments)
   - Follow project's coding standards
   - Apply dependency injection best practices:
     * Inject dependencies through constructors
     * Avoid creating dependencies internally
     * Make dependencies explicit in interfaces
6. Ensure proper module dependencies are declared:
   - Check pom.xml for required dependencies
   - Verify version compatibility
   - Add new dependencies if needed
   - Review component coupling and cohesion
7. Compile with `mvn clean verify`:
   - Address any compilation errors
   - Fix any dependency conflicts
   - Ensure all resources are properly included
8. Run unit tests with `mvn test`:
   - Verify all tests pass
   - Check test coverage
   - Debug any test failures
   - Add missing test cases if gaps are found
   - See [main-rule.mdc](mdc:.cursor/rules/main-rule.mdc) for detailed testing patterns and guidelines
9. Mark the task with an "x":
   - Update parent tasks if all subtasks complete
   - Keep task descriptions up to date
10. Commit changes (see [main-rule.mdc](mdc:.cursor/rules/main-rule.mdc) for commit message guidelines):
    - Include clear commit message
    - Reference related tasks/issues
    - Include test results if relevant
    - Document architectural decisions
11. Wait for user instruction before proceeding to next implementation task

Important Considerations:
- Always verify test coverage before marking a task complete
- Document any assumptions or design decisions made
- Keep related documentation in sync with code changes
- Consider impact on existing functionality
- Follow error handling and logging standards
- Refer to [main-rule.mdc](mdc:.cursor/rules/main-rule.mdc) for:
  * Detailed state management guidelines
  * Testing patterns and best practices
  * Project setup and configuration
  * Tool usage guidelines

Note: Steps 1-10 should be executed automatically in sequence. Only pause at step 11 to wait for user instruction on which implementation task to tackle next. This ensures efficient workflow while still maintaining user control over task selection.