---
description: Request when coding.
globs: 
alwaysApply: false
---
## Implementation Tasks
This file lists the implementation tasks. Each implementation task consists of a set of coding steps listed in [coding-steps.mdc](mdc:.cursor/rules/coding-steps.mdc).

Always review [coding-steps.mdc](mdc:.cursor/rules/coding-steps.mdc):
- At start of task implementation.
- After each step listed in [coding-steps.mdc](mdc:.cursor/rules/coding-steps.mdc)
- After updating any of the tasks listed here.

### 1. Project Setup

- [x] Initialize a new Maven project:
  - Group ID: `com.javacraps`
  - Artifact ID: `javacraps`
  - Version: `1.0-SNAPSHOT`
- [x] Set up standard Maven directory structure:
  - [x] `src/main/java/com/javacraps/...`
  - [x] `src/test/java/com/javacraps/...`

### 2. Implement Core Models

- [x] Create `Player` class for handling bets and balance
  - [x] Add JavaDoc documentation
  - [x] Implement unit tests for bet validation and balance management
- [x] Create `Dice` utility class to simulate rolling
  - [x] Add JavaDoc documentation
  - [x] Implement unit tests for roll range validation
- [x] Create `GameState` class with enums `GamePhase` and `GameStatus`
  - [x] Add JavaDoc documentation
  - [x] Implement unit tests for state transitions

### 3. Game Logic (Controller)

- [x] Create `GameController` class
  - [x] Add JavaDoc documentation
  - [x] Initialize player and game state
  - [x] Prompt for and validate bet
  - [x] Roll dice and evaluate outcome
  - [x] Update balance and display result
  - [x] Reset or end game based on outcome
  - [x] Implement unit tests for game flow
  - [x] Test edge cases (invalid bets, game end conditions)

### 4. Terminal UI (View)

- [x] Create `TerminalView` class
  - [x] Add JavaDoc documentation
  - [x] Display game state and prompt for input
  - [x] Validate and return input
  - [x] Show win/lose messages
  - [x] Implement unit tests for input validation
  - [x] Test display formatting

### 5. Integration & Game Loop

- [ ] Create `Main` class to wire everything
  - [ ] Add JavaDoc documentation
  - [ ] Instantiate `GameController`
  - [ ] Loop until game ends (win/lose)
  - [x] Add integration tests
  - [x] Test full game scenarios

### 6. Testing

- [x] Write unit tests for:
  - [x] Dice roll range (2â€“12)
  - [x] GameState transitions
  - [x] Player bet constraints
  - [x] Input validation
  - [x] Game flow scenarios
- [ ] Write integration tests for:
  - [x] Complete game flow
  - [ ] Win/lose conditions
  - [ ] Error handling

### 7. (Optional) Polish

- [ ] Implement manual reset/restart game feature
  - [ ] Add documentation
  - [ ] Test reset functionality
- [ ] Add ASCII dice visuals or color text output
  - [ ] Add documentation
  - [ ] Test display formatting